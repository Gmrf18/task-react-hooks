[{"/home/gmrfdesk-u/development/react/todo-app-test/src/App.tsx":"1","/home/gmrfdesk-u/development/react/todo-app-test/src/reportWebVitals.ts":"2","/home/gmrfdesk-u/development/react/todo-app-test/src/index.tsx":"3","/home/gmrfdesk-u/development/react/todo-app-test/src/components/Tasks.tsx":"4","/home/gmrfdesk-u/development/react/todo-app-test/src/components/TaskDetail.tsx":"5","/home/gmrfdesk-u/development/react/todo-app-test/src/components/TaskModal.tsx":"6","/home/gmrfdesk-u/development/react/todo-app-test/src/application/CurrentTaskProvider.tsx":"7"},{"size":1234,"mtime":1611620924491,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1611376956735,"results":"10","hashOfConfig":"9"},{"size":501,"mtime":1611378006729,"results":"11","hashOfConfig":"9"},{"size":2438,"mtime":1611633866134,"results":"12","hashOfConfig":"9"},{"size":1888,"mtime":1611631860594,"results":"13","hashOfConfig":"9"},{"size":2720,"mtime":1611625488282,"results":"14","hashOfConfig":"9"},{"size":290,"mtime":1611602158187,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l4ewh4",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gmrfdesk-u/development/react/todo-app-test/src/App.tsx",[],"/home/gmrfdesk-u/development/react/todo-app-test/src/reportWebVitals.ts",[],"/home/gmrfdesk-u/development/react/todo-app-test/src/index.tsx",[],"/home/gmrfdesk-u/development/react/todo-app-test/src/components/Tasks.tsx",[],"/home/gmrfdesk-u/development/react/todo-app-test/src/components/TaskDetail.tsx",["31"],"import { formatDistanceToNow } from \"date-fns\";\nimport React, { useContext } from \"react\";\nimport { CurrentTaskProvider } from \"../application/CurrentTaskProvider\";\nimport { Props } from \"../interfaces/modalSidebar.interface\";\nimport { ITask } from \"../interfaces/task.interface\";\n\ninterface taskModal extends Props {\n  tasks: ITask[];\n  setTask: any;\n}\nexport const TaskDetail: React.FC<taskModal> = ({\n  setModalSidebar,\n  showModalSidebar,\n  setTask,\n  tasks,\n}) => {\n  const { currentTask, setCurrentTask } = useContext(CurrentTaskProvider);\n\n  const closeSidebar = () => {\n    setCurrentTask(null);\n    setModalSidebar({\n      ...showModalSidebar,\n      sidebar: false,\n    });\n  };\n\n  const setStatus = (e: any) => {\n    console.log(e.target.value);\n\n    const taskE = {\n      ...currentTask,\n      status: e.target.value,\n    };\n    setCurrentTask(taskE);\n    setTask(tasks.map((task) => (task.id == taskE.id ? taskE : task)));\n  };\n\n  const editTask = () => {\n    setModalSidebar({\n      ...showModalSidebar,\n      modal: true,\n      sidebar: false,\n    });\n  };\n\n  const deleteTask = () => {\n    setTask(tasks.filter((task) => task.id !== currentTask?.id));\n    closeSidebar();\n  };\n\n  return (\n    <div className=\"TaskDetail\">\n      <button className=\"close\" onClick={closeSidebar}>\n        X\n      </button>\n      <h3>{currentTask?.title}</h3>\n      <select value={currentTask?.status} onChange={setStatus}>\n        <option value=\"Pending\">Pending</option>\n        <option value=\"Complete\">Complete</option>\n      </select>\n      <h5>Description</h5>\n      <p>{currentTask?.description}</p>\n      <br />\n      <p>\n        {formatDistanceToNow(currentTask ? currentTask.update : new Date())}\n      </p>\n      <p>This application is created by Gerardo Reyes</p>\n      <button onClick={editTask}>Edit</button>\n      <button onClick={deleteTask}>Delete</button>\n    </div>\n  );\n};\n","/home/gmrfdesk-u/development/react/todo-app-test/src/components/TaskModal.tsx",[],"/home/gmrfdesk-u/development/react/todo-app-test/src/application/CurrentTaskProvider.tsx",[],{"ruleId":"32","severity":1,"message":"33","line":35,"column":42,"nodeType":"34","messageId":"35","endLine":35,"endColumn":44},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]